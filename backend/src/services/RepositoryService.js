/* 
üéØ PROP√ìSITO DESTE ARQUIVO:
Esta √© a "PONTE" entre nosso backend e a API do GitHub.
Transforma dados bagun√ßados do GitHub em dados limpos pro Angular.

üìç FLUXO:
1. repositoryResolvers.js chama m√©todos deste service
2. Service faz requisi√ß√£o HTTP pra GitHub API
3. GitHub retorna JSON bagun√ßado (snake_case, campos extras)
4. Service limpa/organiza os dados
5. Retorna dados limpos pro resolver
6. Resolver manda pro Angular via GraphQL

üîÑ CONEX√ïES:
- CHAMADO POR: repositoryResolvers.js (quando Angular faz query)
- FAZ CHAMADAS PARA: api.github.com (API p√∫blica do GitHub)
- RETORNA DADOS PARA: repositoryResolvers.js ‚Üí schema.js ‚Üí Angular
*/

const axios = require('axios'); // Biblioteca pra fazer requisi√ß√µes HTTP

/* 
üè≠ SERVICE CLASS - Fabrica de dados limpos do GitHub
RESPONSABILIDADE: Buscar + limpar + organizar dados do GitHub
PADR√ÉO: Singleton (uma √∫nica inst√¢ncia compartilhada)
*/
class RepositoryService {
  constructor() {
    /* 
    üîß AXIOS CONFIGURADO - Cliente HTTP espec√≠fico pro GitHub
    POR QUE: GitHub API tem regras espec√≠ficas (headers obrigat√≥rios, rate limiting)
    HEADERS OBRIGAT√ìRIOS: GitHub exige User-Agent sen√£o bloqueia
    */
    this.githubApi = axios.create({
      baseURL: 'https://api.github.com',                    // Todas as chamadas v√£o pra GitHub
      headers: {
        'Accept': 'application/vnd.github.v3+json',         // Vers√£o 3 da API (mais est√°vel)
        'User-Agent': 'Notro-Challenge-App'                 // Identifica√ß√£o obrigat√≥ria
      }
    });
  }

  /* 
  üîç SEARCH REPOSITORIES - M√©todo PRINCIPAL chamado pelo Angular
  CHAMADO POR: repositoryResolvers.searchRepositories()
  RECEBE: query="react", page=1, perPage=10 (do Angular via GraphQL)
  RETORNA: Objeto RepositoryConnection pronto pro Angular
  */
  async searchRepositories(query, page = 1, perPage = 10) {
    try {
      /* 
      üåê GITHUB API CALL - Requisi√ß√£o real pro GitHub
      ENDPOINT: GET https://api.github.com/search/repositories
      EXEMPLO URL FINAL: /search/repositories?q=react&page=1&per_page=10&sort=stars&order=desc
      RESPOSTA: JSON com total_count + array "items" com repos
      */
      const response = await this.githubApi.get('/search/repositories', {
        params: {
          q: query,              // Angular digitou "react" ‚Üí GitHub busca repos com "react"
          page: page,            // Angular quer p√°gina 2 ‚Üí GitHub retorna p√°gina 2
          per_page: perPage,     // Angular quer 10 por p√°gina ‚Üí GitHub limita em 10
          sort: 'stars',         // Ordena por popularidade (mais estrelas primeiro)
          order: 'desc'          // Decrescente (50k estrelas antes de 1k estrelas)
        }
      });

      /* 
      üßÆ DATA PROCESSING - Transforma resposta bagun√ßada em dados √∫teis
      GITHUB RETORNA: { total_count: 50000, items: [...] }
      N√ìS TRANSFORMAMOS: Em RepositoryConnection com pagina√ß√£o calculada
      */
      const { data } = response; // GitHub manda: { total_count, items, incomplete_results }
      const totalPages = Math.ceil(data.total_count / perPage); // Ex: 50000 repos √∑ 10 = 5000 p√°ginas

      /* 
      üì¶ RETURN FORMATTED DATA - Formato final que Angular vai receber
      IMPORTANTE: Este formato DEVE bater com RepositoryConnectionType no schema.js
      TRANSFORMA√á√ÉO: GitHub snake_case ‚Üí Nosso camelCase + pagina√ß√£o calculada
      */
      return {
        totalCount: data.total_count,                           // GitHub: total_count ‚Üí N√≥s: totalCount
        repositories: data.items.map(this.formatRepository),    // Array de repos limpos (m√©todo abaixo)
        hasNextPage: page < totalPages,                         // Angular mostra bot√£o "Pr√≥ximo"?
        hasPreviousPage: page > 1,                             // Angular mostra bot√£o "Anterior"?
        currentPage: page,                                      // Angular mostra "P√°gina X"
        totalPages: totalPages                                  // Angular mostra "de Y p√°ginas"
      };
    } catch (error) {
      /* 
      ‚ùå ERROR HANDLING - Se GitHub estiver fora ou API falhar
      CASOS: Rate limit, GitHub fora do ar, query inv√°lida, sem internet
      RESULTADO: Angular recebe erro via GraphQL
      */
      console.error('Erro GitHub API:', error.response?.data || error.message);
      throw new Error('Falha ao buscar reposit√≥rios no GitHub');
    }
  }

  // GET SINGLE REPOSITORY - Busca um reposit√≥rio espec√≠fico
  async getRepository(owner, name) {
    try {
      // SINGLE REPO API CALL - Busca repo espec√≠fico (ex: facebook/react)
      const response = await this.githubApi.get(`/repos/${owner}/${name}`);
      return this.formatRepository(response.data); // Formata e retorna
    } catch (error) {
      // ERROR HANDLING - Se repo n√£o existe ou erro de API
      console.error('Erro GitHub API:', error.response?.data || error.message);
      throw new Error('Reposit√≥rio n√£o encontrado');
    }
  }

  /* 
  üßπ FORMAT REPOSITORY - O "tradutor" principal GitHub ‚Üí Angular
  ENTRADA: Objeto repo bagun√ßado do GitHub (snake_case, campos extras, nulls)
  SA√çDA: Objeto limpo que bate exatamente com RepositoryType do schema.js
  
  üîÑ TRANSFORMA√á√ïES PRINCIPAIS:
  - GitHub: full_name ‚Üí N√≥s: fullName (camelCase)
  - GitHub: stargazers_count ‚Üí N√≥s: stargazersCount 
  - GitHub: html_url ‚Üí N√≥s: url
  - GitHub: owner.avatar_url ‚Üí N√≥s: owner.avatarUrl
  - GitHub: null ‚Üí N√≥s: valores padr√£o seguros
  
  ‚ö†Ô∏è CR√çTICO: Se este formato n√£o bater com schema.js, Angular quebra!
  */
  formatRepository(repo) {
    return {
      id: repo.id.toString(),                           // GitHub manda number, GraphQL quer string
      name: repo.name,                                  // Ex: "react" (igual no GitHub)
      fullName: repo.full_name,                         // GitHub: full_name ‚Üí N√≥s: fullName
      description: repo.description || 'Sem descri√ß√£o', // GitHub pode mandar null
      url: repo.html_url,                               // GitHub: html_url ‚Üí N√≥s: url (pro browser)
      stargazersCount: repo.stargazers_count || 0,      // GitHub: stargazers_count ‚Üí stargazersCount
      watchersCount: repo.watchers_count || 0,          // GitHub: watchers_count ‚Üí watchersCount  
      forksCount: repo.forks_count || 0,                // GitHub: forks_count ‚Üí forksCount
      openIssuesCount: repo.open_issues_count || 0,     // GitHub: open_issues_count ‚Üí openIssuesCount
      language: repo.language || 'N/A',                 // GitHub pode mandar null pra linguagem
      owner: {                                          // Objeto aninhado (bate com OwnerType)
        login: repo.owner.login,                        // Username do dono (ex: "facebook")
        avatarUrl: repo.owner.avatar_url,               // GitHub: avatar_url ‚Üí avatarUrl
        url: repo.owner.html_url                        // GitHub: html_url ‚Üí url (perfil do dono)
      },
      createdAt: repo.created_at,                       // ISO string (ex: "2013-05-24T16:15:54Z")
      updatedAt: repo.updated_at                        // ISO string da √∫ltima atualiza√ß√£o
    };
  }
}

// EXPORT SINGLETON - Exporta uma √∫nica inst√¢ncia da classe (padr√£o singleton)
module.exports = new RepositoryService();
