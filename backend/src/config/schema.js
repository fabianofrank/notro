/* 
üéØ PROP√ìSITO DESTE ARQUIVO:
Este arquivo √© o "CONTRATO" entre o frontend (Angular) e o backend.
Define EXATAMENTE quais dados o Angular pode pedir e em que formato vai receber.

üìç FLUXO COMPLETO:
1. Angular faz query GraphQL ‚Üí 2. Este schema valida ‚Üí 3. Chama resolver ‚Üí 
4. Resolver chama service ‚Üí 5. Service busca GitHub API ‚Üí 6. Dados voltam formatados

üîÑ CONEX√ïES:
- VEM DE: server.js (usa este schema no endpoint /graphql)
- VAI PARA: repositoryResolvers.js (fun√ß√µes que buscam os dados)
- USADO POR: Frontend Angular (vai fazer queries baseadas nestes tipos)
*/

const { 
  GraphQLSchema,     // Monta o schema final que vai pro servidor
  GraphQLObjectType, // Cria "tipos" customizados (como Repository, Owner)
  GraphQLString,     // Tipo texto
  GraphQLInt,        // Tipo n√∫mero
  GraphQLList,       // Tipo lista/array
  GraphQLNonNull,    // Torna um campo obrigat√≥rio
  GraphQLBoolean,    // Tipo verdadeiro/falso
  GraphQLID          // Tipo identificador √∫nico
} = require('graphql');

// Importa as fun√ß√µes que V√ÉO BUSCAR os dados quando Angular fizer as queries
const repositoryResolvers = require('../resolvers/repositoryResolvers');

/* 
üèóÔ∏è OWNER TYPE - Estrutura do "dono" de um reposit√≥rio
ORIGEM: Dados v√™m da API GitHub (campo "owner" em cada repo)
DESTINO: Angular vai receber estes campos quando pedir um reposit√≥rio
EXEMPLO: { login: "facebook", avatarUrl: "https://...", url: "https://github.com/facebook" }
*/
const OwnerType = new GraphQLObjectType({
  name: 'Owner',
  fields: {
    login: { type: new GraphQLNonNull(GraphQLString) },    // Ex: "facebook", "microsoft"
    avatarUrl: { type: new GraphQLNonNull(GraphQLString) }, // Foto do perfil do GitHub
    url: { type: new GraphQLNonNull(GraphQLString) }        // Link pro perfil do GitHub
  }
});

/* 
üèóÔ∏è REPOSITORY TYPE - Estrutura PRINCIPAL de um reposit√≥rio
ORIGEM: GitHub API retorna dados bagun√ßados (snake_case, campos extras, etc)
DESTINO: Angular recebe dados limpos e organizados (camelCase, s√≥ o que precisa)
TRANSFORMA√á√ÉO: RepositoryService.formatRepository() converte GitHub ‚Üí este formato
EXEMPLO FINAL: { id: "123", name: "react", fullName: "facebook/react", stargazersCount: 50000, ... }
*/
const RepositoryType = new GraphQLObjectType({
  name: 'Repository',
  fields: {
    id: { type: new GraphQLNonNull(GraphQLID) },           // GitHub manda como n√∫mero, convertemos pra string
    name: { type: new GraphQLNonNull(GraphQLString) },      // Ex: "react" (vem direto do GitHub)
    fullName: { type: new GraphQLNonNull(GraphQLString) },  // Ex: "facebook/react" (vem do GitHub como full_name)
    description: { type: GraphQLString },                   // Pode ser null no GitHub, aceitamos aqui tamb√©m
    url: { type: new GraphQLNonNull(GraphQLString) },       // GitHub manda como html_url, mapeamos pra url
    stargazersCount: { type: new GraphQLNonNull(GraphQLInt) }, // GitHub: stargazers_count ‚Üí n√≥s: stargazersCount
    watchersCount: { type: new GraphQLNonNull(GraphQLInt) },   // GitHub: watchers_count ‚Üí n√≥s: watchersCount
    forksCount: { type: new GraphQLNonNull(GraphQLInt) },      // GitHub: forks_count ‚Üí n√≥s: forksCount
    openIssuesCount: { type: new GraphQLNonNull(GraphQLInt) }, // GitHub: open_issues_count ‚Üí n√≥s: openIssuesCount
    language: { type: GraphQLString },                      // Linguagem principal (pode ser null)
    owner: { type: new GraphQLNonNull(OwnerType) },        // Usa o tipo Owner definido acima
    createdAt: { type: new GraphQLNonNull(GraphQLString) }, // Data em formato ISO string
    updatedAt: { type: new GraphQLNonNull(GraphQLString) }  // Data em formato ISO string
  }
});

/* 
üèóÔ∏è REPOSITORY CONNECTION TYPE - Container para pagina√ß√£o
ORIGEM: RepositoryService monta este objeto juntando dados do GitHub + c√°lculos de pagina√ß√£o
DESTINO: Angular recebe lista de repos + info pra montar pagina√ß√£o (bot√µes pr√≥ximo/anterior)
USO: Quando Angular pede p√°gina 2 de 10 repos, recebe este formato completo
EXEMPLO: { repositories: [...], currentPage: 2, totalPages: 50, hasNextPage: true, ... }
*/
const RepositoryConnectionType = new GraphQLObjectType({
  name: 'RepositoryConnection',
  fields: {
    totalCount: { type: new GraphQLNonNull(GraphQLInt) },     // Ex: 15.000 repos encontrados no total
    repositories: { 
      type: new GraphQLNonNull(                               // Array que SEMPRE existe (mesmo que vazio)
        new GraphQLList(                                      // de reposit√≥rios 
          new GraphQLNonNull(RepositoryType)                  // onde cada repo √© obrigat√≥rio/v√°lido
        )
      ) 
    },
    hasNextPage: { type: new GraphQLNonNull(GraphQLBoolean) },    // Angular usa pra mostrar bot√£o "Pr√≥ximo"
    hasPreviousPage: { type: new GraphQLNonNull(GraphQLBoolean) }, // Angular usa pra mostrar bot√£o "Anterior"
    currentPage: { type: new GraphQLNonNull(GraphQLInt) },        // Angular mostra "P√°gina X de Y"
    totalPages: { type: new GraphQLNonNull(GraphQLInt) }          // Angular calcula pagina√ß√£o
  }
});

/* 
üèóÔ∏è QUERY TYPE - As "perguntas" que o Angular pode fazer
FUN√á√ÉO: Define TODAS as opera√ß√µes dispon√≠veis pro frontend
CONEX√ÉO: Cada query aqui conecta com uma fun√ß√£o em repositoryResolvers.js
USADO PELO ANGULAR: vai fazer queries como:
query { searchRepositories(query: "react", page: 1) { repositories { name, stargazersCount } } }
*/
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    /* 
    üìã QUERY: searchRepositories
    O QUE FAZ: Angular usa pra buscar repos com termo de pesquisa
    FLUXO: Angular ‚Üí schema ‚Üí repositoryResolvers.searchRepositories ‚Üí RepositoryService ‚Üí GitHub API
    ENTRADA: query="react", page=1, perPage=10
    SA√çDA: RepositoryConnection (lista + pagina√ß√£o)
    */
    searchRepositories: {
      type: new GraphQLNonNull(RepositoryConnectionType), // SEMPRE retorna algo (mesmo que lista vazia)
      args: {
        query: { type: new GraphQLNonNull(GraphQLString) },   // OBRIGAT√ìRIO: termo de busca
        page: { type: GraphQLInt, defaultValue: 1 },          // OPCIONAL: p√°gina (padr√£o 1)
        perPage: { type: GraphQLInt, defaultValue: 10 }       // OPCIONAL: items por p√°gina (padr√£o 10)
      },
      resolve: repositoryResolvers.searchRepositories        // CHAMA esta fun√ß√£o quando Angular fizer a query
    },
    
    /* 
    üìã QUERY: repository
    O QUE FAZ: Angular usa pra pegar detalhes de UM repo espec√≠fico
    FLUXO: Angular ‚Üí schema ‚Üí repositoryResolvers.repository ‚Üí RepositoryService ‚Üí GitHub API
    ENTRADA: owner="facebook", name="react"
    SA√çDA: Repository OU null (se n√£o existir)
    */
    repository: {
      type: RepositoryType,                                   // PODE ser null se repo n√£o existir
      args: {
        owner: { type: new GraphQLNonNull(GraphQLString) },   // OBRIGAT√ìRIO: ex "facebook"
        name: { type: new GraphQLNonNull(GraphQLString) }     // OBRIGAT√ìRIO: ex "react"
      },
      resolve: repositoryResolvers.repository                // CHAMA esta fun√ß√£o quando Angular fizer a query
    }
  }
});

/* 
üéØ SCHEMA FINAL - Junta tudo e entrega pro servidor
FUN√á√ÉO: Este objeto √© usado em server.js no endpoint /graphql
CONEX√ÉO: server.js importa este schema e disponibiliza pro Angular
RESULTADO: Angular pode acessar http://localhost:4000/graphql e fazer qualquer query definida acima
*/
const schema = new GraphQLSchema({
  query: QueryType // Disponibiliza todas as queries definidas acima
});

module.exports = schema;
